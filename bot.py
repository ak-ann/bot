import re
import os
import requests
import telebot
import logging
from dotenv import load_dotenv
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import random


from rag.loader import search_docs
from web.search import search_web
from viz.plotter import ask_grok_for_plot, render_plot


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_NAME = "x-ai/grok-4-fast:free"


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


PLOT_KEYWORDS = ["–≥—Ä–∞—Ñ–∏–∫", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "chart", "plot", "–ø–æ—Å—Ç—Ä–æ–π"]
WEB_KEYWORDS = ["–Ω–æ–≤–æ—Å—Ç–∏", "—Å–µ–≥–æ–¥–Ω—è", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π", "—Å–µ–π—á–∞—Å", "2025"]


if not BOT_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError(
        "BOT_TOKEN –∏ OPENROUTER_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ .env"
    )

bot = telebot.TeleBot(BOT_TOKEN)


BUTTON_SUGGESTIONS = [
    "–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞?",
    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –ò–ò",
    "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?",
    "–ì–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
    "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?",
    "–ü–æ—Å—Ç—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ü–∏–π Tesla –∑–∞ –≥–æ–¥",
    "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å –∑–∞ –º–µ—Å—è—Ü",
    "–°—Ä–∞–≤–Ω–∏ –∫—É—Ä—Å—ã EUR –∏ USD –∑–∞ –Ω–µ–¥–µ–ª—é",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ Large Language Model?",
    "–ö—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
    "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ",
    "–ö–∞–∫–∏–µ –≤–∫–ª–∞–¥—ã –µ—Å—Ç—å –≤ –°–±–µ—Ä–µ?",
    "–£—Å–ª–æ–≤–∏—è –ø–æ –∏–ø–æ—Ç–µ–∫–µ –¥–ª—è –º–æ–ª–æ–¥–æ–π —Å–µ–º—å–∏",
    "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç –≤ –°–±–µ—Ä–ë–∞–Ω–∫–µ?",
    "–†–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –°–±–µ—Ä–∞",
    "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –°–±–µ—Ä–ü—Ä–∞–π–º?",
    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ '–°–ø–∞—Å–∏–±–æ'?",
    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–ë–∞–Ω–∫–µ",
    "–ê–∫—Ü–∏–∏ –°–±–µ—Ä–∞: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞",
    "–ü–æ—Å—Ç—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ü–∏–π –°–±–µ—Ä–∞ –∑–∞ –≥–æ–¥",
    "–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë",
]


def format_grok_response(text: str) -> str:
    """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç Markdown –æ—Ç Grok –¥–ª—è parse_mode='MarkdownV2' –≤ Telegram."""
    text = re.sub(r'###\s*(.*)', r'*\1*', text)
    text = re.sub(r'\*\*(.*?)\*\*', r'*\1*', text)
    text = re.sub(r'^\s*\*\s', '‚Ä¢ ', text, flags=re.MULTILINE)

    escape_chars = r'[_`\[\]()~>#+-=|{}.!]'
    text = re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)
    text = text.replace('\\*', '*').replace('\\‚Ä¢', '‚Ä¢')

    return text


def send_long_message(chat_id, text, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–±–∏–≤–∞—è –∏—Ö –Ω–∞ —á–∞—Å—Ç–∏."""
    MAX_LENGTH = 4096
    if len(text) <= MAX_LENGTH:
        bot.send_message(chat_id, text, **kwargs)
    else:
        parts = []
        while len(text) > 0:
            if len(text) > MAX_LENGTH:
                part = text[:MAX_LENGTH]
                last_newline = part.rfind('\n')
                if last_newline != -1:
                    parts.append(part[:last_newline])
                    text = text[last_newline+1:]
                else:
                    parts.append(part)
                    text = text[MAX_LENGTH:]
            else:
                parts.append(text)
                break

        for part in parts:
            bot.send_message(chat_id, part, **kwargs)


def ask_grok(messages: list) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –ò–ò –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI.
    """
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": MODEL_NAME,
        "messages": messages,
        "max_tokens": 1024
    }
    try:
        response = requests.post(
            API_URL,
            headers=headers,
            json=data,
            timeout=45
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return (
            "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ç–∏."
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except KeyError:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {response.text}")
        return "–ü–æ–ª—É—á–µ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, –Ω–µ –º–æ–≥—É –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å."
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Grok: {e}")
        return "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ –ø—Ä–æ–±–ª–µ–º–µ."


@bot.message_handler(commands=["start", "help"])
def start(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    try:
        selected_questions = random.sample(BUTTON_SUGGESTIONS, 3)
    except ValueError:
        selected_questions = BUTTON_SUGGESTIONS

    buttons = [KeyboardButton(text=q) for q in selected_questions]
    markup.add(*buttons)

    help_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∏–∂–µ üëá"
    )
    bot.send_message(message.chat.id, help_text, reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    query = message.text
    chat_id = message.chat.id

    bot.send_chat_action(chat_id, 'typing')

    try:

        plot_keywords = ["–≥—Ä–∞—Ñ–∏–∫", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "chart", "plot", "–ø–æ—Å—Ç—Ä–æ–π"]
        if any(k.lower() in query.lower() for k in plot_keywords):
            plot_data = ask_grok_for_plot(query)
            if plot_data:
                buf = render_plot(plot_data)
                bot.send_photo(chat_id, buf)
                buf.close()
                return

        docs_context = "\n".join(search_docs(query))
        web_context = (
            search_web(query)
            if any(w in query.lower() for w in ["–Ω–æ–≤–æ—Å—Ç–∏", "—Å–µ–≥–æ–¥–Ω—è", "–∫—É—Ä—Å"])
            else ""
        )

        system_prompt = (
            "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        prompt = (
            f"–í–æ–ø—Ä–æ—Å: {query}\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n{docs_context}\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n{web_context}"
        )
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]

        final_answer = ask_grok(messages)

        formatted_answer = format_grok_response(final_answer)
        send_long_message(chat_id, formatted_answer, parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}", exc_info=True)
        bot.send_message(chat_id, "–û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


if __name__ == '__main__':
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
